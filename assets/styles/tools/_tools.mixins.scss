//_tools.mixins.scss

//Clear fix

@mixin clearfix {
    &:after {
        visibility: hidden;
        display: block;
        content: "";
        clear: both;
        height: 0;
    }
}

// Font-size

@mixin font-size($size, $base: 16) {
    $value: $size/$base;
    font-size: ($value) + px;
    font-size: ($value) + rem;
}

//Sizing helpers

@mixin size($width, $height) {
    width: $width;
    height: $height;
}

@mixin square($size) {
    @include size($size, $size);
}

// Truncating text

@mixin text-truncate($maxwidth) {
    display: inline-block;
    max-width: $maxwidth;
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
}

// Clear for floated grids

@mixin wrap-every($n) {
    &:nth-of-type(#{$n}n + 1) {
        clear: left;
    }
}

// Reset

@mixin unwrap-every($n) {
    &:nth-of-type(#{$n}n + 1) {
        clear: none;
    }
}

// Font Size Mapping With Line Height

@mixin font-size($fs-map, $fs-breakpoints: $breakpoints) {
  @each $fs-breakpoint, $fs-font-size in $fs-map {
    @if $fs-breakpoint == null {
      @include make-font-size($fs-font-size);
    }
    @else {
      // If $fs-font-size is a key that exists in
      // $fs-breakpoints, use the value
      @if map-has-key($fs-breakpoints, $fs-breakpoint) {
        $fs-breakpoint: map-get($fs-breakpoints, $fs-breakpoint);
      }
      @media only screen and ($fs-breakpoint) {
        @include make-font-size($fs-font-size);
      }
    }
  }
}

// Utility function for mixin font-size
@mixin make-font-size($fs-font-size) {
  // If $fs-font-size is a list, include
  // both font-size and line-height
  @if type-of($fs-font-size) == "list" {
    font-size: nth($fs-font-size, 1);
    @if (length($fs-font-size) > 1) {
      line-height: nth($fs-font-size, 2);
    }
  }
  @else {
    font-size: $fs-font-size;
  }
}